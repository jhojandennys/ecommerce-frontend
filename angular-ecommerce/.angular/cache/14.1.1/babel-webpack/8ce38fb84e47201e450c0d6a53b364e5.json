{"ast":null,"code":"import _asyncToGenerator from \"/Users/jhojansobrino/Downloads/12-security-secure-communication-with-https-angular-environment-settings/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { OKTA_AUTH } from '@okta/okta-angular';\nimport { from, lastValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@okta/okta-auth-js\";\nexport class AuthInterceptorService {\n  constructor(oktaAuth) {\n    this.oktaAuth = oktaAuth;\n  }\n\n  intercept(request, next) {\n    return from(this.handleAccess(request, next));\n  }\n\n  handleAccess(request, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Only add an access token for secured endpoints\n      const theEndpoint = environment.shopApiUrl + '/orders';\n      const securedEndpoints = [theEndpoint];\n\n      if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n        // get access token\n        const accessToken = _this.oktaAuth.getAccessToken(); // clone the request and add new header with access token\n\n\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + accessToken\n          }\n        });\n      }\n\n      return yield lastValueFrom(next.handle(request));\n    })();\n  }\n\n}\n\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(OKTA_AUTH));\n};\n\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAASC,IAAT,EAAeC,aAAf,QAAgD,MAAhD;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAKA,OAAM,MAAOC,sBAAP,CAA6B;EAEjCC,YAAuCC,QAAvC,EAAyD;IAAlB;EAAuB;;EAE9DC,SAAS,CAACC,OAAD,EAA4BC,IAA5B,EAA6C;IACpD,OAAOR,IAAI,CAAC,KAAKS,YAAL,CAAkBF,OAAlB,EAA2BC,IAA3B,CAAD,CAAX;EACD;;EAEaC,YAAY,CAACF,OAAD,EAA4BC,IAA5B,EAA6C;IAAA;;IAAA;MAErE;MACA,MAAME,WAAW,GAAGR,WAAW,CAACS,UAAZ,GAAyB,SAA7C;MACA,MAAMC,gBAAgB,GAAG,CAACF,WAAD,CAAzB;;MAEA,IAAIE,gBAAgB,CAACC,IAAjB,CAAsBC,GAAG,IAAIP,OAAO,CAACQ,aAAR,CAAsBC,QAAtB,CAA+BF,GAA/B,CAA7B,CAAJ,EAAuE;QAErE;QACA,MAAMG,WAAW,GAAG,KAAI,CAACZ,QAAL,CAAca,cAAd,EAApB,CAHqE,CAKrE;;;QACAX,OAAO,GAAGA,OAAO,CAACY,KAAR,CAAc;UACtBC,UAAU,EAAE;YACVC,aAAa,EAAE,YAAYJ;UADjB;QADU,CAAd,CAAV;MAKD;;MAED,aAAahB,aAAa,CAACO,IAAI,CAACc,MAAL,CAAYf,OAAZ,CAAD,CAA1B;IAnBqE;EAoBtE;;AA5BgC;;;mBAAtBJ,wBAAsBoB,YAEbxB,SAFa;AAEJ;;;SAFlBI;EAAsBqB,SAAtBrB,sBAAsB;EAAAsB,YAFrB","names":["OKTA_AUTH","from","lastValueFrom","environment","AuthInterceptorService","constructor","oktaAuth","intercept","request","next","handleAccess","theEndpoint","shopApiUrl","securedEndpoints","some","url","urlWithParams","includes","accessToken","getAccessToken","clone","setHeaders","Authorization","handle","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/jhojansobrino/Downloads/12-security-secure-communication-with-https-angular-environment-settings/03-frontend/angular-ecommerce/src/app/services/auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { OKTA_AUTH } from '@okta/okta-angular';\nimport { OktaAuth } from '@okta/okta-auth-js';\nimport { from, lastValueFrom, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(@Inject(OKTA_AUTH) private oktaAuth: OktaAuth) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return from(this.handleAccess(request, next));\n  }\n\n  private async handleAccess(request: HttpRequest<any>, next: HttpHandler): Promise<HttpEvent<any>> {\n\n    // Only add an access token for secured endpoints\n    const theEndpoint = environment.shopApiUrl + '/orders';\n    const securedEndpoints = [theEndpoint];\n\n    if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n\n      // get access token\n      const accessToken = this.oktaAuth.getAccessToken();\n\n      // clone the request and add new header with access token\n      request = request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + accessToken\n        }\n      });\n    }\n\n    return await lastValueFrom(next.handle(request));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}